// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _01_initial.Models;

namespace _01_initial.Migrations
{
    [DbContext(typeof(EgeDbContext))]
    partial class EgeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("_01_initial.Models.Categories", b =>
                {
                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Category_Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("_01_initial.Models.Cities", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("City_Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("_01_initial.Models.DeletedEvents", b =>
                {
                    b.Property<DateTime>("Del_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Del_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Del_Event_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Del_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Del_Date");

                    b.ToTable("DeletedEvents");
                });

            modelBuilder.Entity("_01_initial.Models.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("City_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("isTicket")
                        .HasColumnType("bit");

                    b.HasKey("EventId");

                    b.HasIndex("Category_Name");

                    b.HasIndex("City_Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("_01_initial.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Chk_Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("EventsEventId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAttender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromoter")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("EMail")
                        .IsUnique();

                    b.HasIndex("EventsEventId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("_01_initial.Models.Events", b =>
                {
                    b.HasOne("_01_initial.Models.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("Category_Name");

                    b.HasOne("_01_initial.Models.Cities", "City")
                        .WithMany()
                        .HasForeignKey("City_Id");

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("_01_initial.Models.Users", b =>
                {
                    b.HasOne("_01_initial.Models.Events", null)
                        .WithMany("Attenders")
                        .HasForeignKey("EventsEventId");
                });

            modelBuilder.Entity("_01_initial.Models.Events", b =>
                {
                    b.Navigation("Attenders");
                });
#pragma warning restore 612, 618
        }
    }
}
